name: Lint, Dockerize and Deploy to Docker Hub

on:
  push:
    branches:
      - main      # Trigger on push to main branch
  workflow_dispatch: # Manual trigger

env:
  DOCKER_IMAGE_NAME: "my-react-app"    # Your Docker image name
  DOCKER_TAG: latest                   # Default Docker tag

jobs:
  lint:
    name: Lint the React Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Lint the React code
        run: npm run lint
        continue-on-error: false  # Fail the job if linting fails

  matrix_builds:
    name: Run tests on multiple Node.js versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18]  # Run tests on Node.js versions 16 and 18
      fail-fast: true  # Stop matrix build if any of the jobs fail
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run test
        continue-on-error: false  # Fail the job if tests fail

  dockerize:
    name: Dockerize the Application
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install dependencies
        run: npm install

      - name: Build the React project
        run: npm run build
        continue-on-error: false  # Fail the job if build fails

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
        continue-on-error: false  # Fail the job if pushing to Docker Hub fails

  notify:
    name: Notify on Completion
    needs: [lint, dockerize]
    runs-on: ubuntu-latest
    steps:
    - name: Send Notification
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "Deployment Successful! Image pushed to Docker Hub."
        else
          echo "Error in Deployment!"
          # Add more notification methods here (e.g., Slack, Email)
          exit 1
        fi  # Close the 'if' block
      shell: bash
      continue-on-error: true  # Allow notification step to fail without affecting workflow

  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.4.0  # You can change this to the version you need.

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1  # Specify your region

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply -auto-approve

    # Save the EC2 instance public IP or DNS for the next step
    - name: Get EC2 Instance Public IP
      id: ec2_ip
      run: |
        terraform_output=$(terraform output -raw ec2_instance_public_ip)
        echo "Raw Terraform Output: $terraform_output"
        instance_ip=$(echo "$terraform_output" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | tr -d '\r\n')
        instance_ip=$(echo "$instance_ip" | sed 's/\(.*\)\1/\1/')
        echo "Cleaned EC2 IP Address: $instance_ip"
        echo "ec2_ip=$instance_ip" >> $GITHUB_ENV

    - name: Set up SSH for EC2 access
      run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ls -l ~/.ssh/  # Debug the contents of ~/.ssh
          # Debug the IP address
          echo "EC2 IP Address: ${{ env.ec2_ip }}"
          # Wait for EC2 instance to be ready
          sleep 30  # Wait for the instance to be accessible
          # Fetch the SSH key for the EC2 instance
          ssh-keyscan -H ${{ env.ec2_ip }} >> ~/.ssh/known_hosts || echo "ssh-keyscan failed"
    
    - name: Check if SSH private key exists
      run: ls -l ~/.ssh/  # Check the contents of ~/.ssh to ensure the private key exists
    
    - name: Copy deployment.yaml to EC2
      run: |
          echo "EC2 IP Address: ${{ env.ec2_ip }}"  # Debug IP again to ensure it's available
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no deployment.yaml ubuntu@${{ env.ec2_ip }}:/home/ubuntu/
    
    - name: Configure kubectl and apply deployment.yaml
      run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ env.ec2_ip }} << EOF
            # Install kubectl if not already installed
            if ! command -v kubectl &> /dev/null
            then
              curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              sudo mv ./kubectl /usr/local/bin/kubectl
            fi
            
            # Install minikube if not already installed
            if ! command -v minikube &> /dev/null
            then
              curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              chmod +x minikube
              sudo mv minikube /usr/local/bin/
            fi

            # Start minikube and apply kubectl commands
            bash -l -c "minikube start"
            bash -l -c "kubectl apply -f /home/ubuntu/deployment.yaml"
            bash -l -c "sleep 10"
            bash -l -c "kubectl port-forward --address 0.0.0.0 service/my-app-service 30326:80 &"
          EOF
